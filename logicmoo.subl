;; From: https://github.com/TeamSPoon/logicmoo_workspace/wiki

;; TODO: reconcile with planlogic.subl

(f "LogicMOOMt")
(am '(#$isa #$LogicMOOMt #$Microtheory) #$BaseKB)

(f "PrologMUD-TheProgram")
(am '(#$isa #$PrologMUD-TheProgram #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$authorOfProgramWithAIS #$PrologMUD-TheProgram #$DouglasMiles) #$LogicMOOMt)

(f "PrologMOO-TheProgram")
(am '(#$isa #$PrologMOO-TheProgram #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$authorOfProgramWithAIS #$PrologMOO-TheProgram #$DouglasMiles) #$LogicMOOMt)

(f "LogicMOO-TheProgram")
(am '(#$isa #$LogicMOO-TheProgram #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$authorOfProgramWithAIS #$LogicMOO-TheProgram #$DouglasMiles) #$LogicMOOMt)

(f "PrologCYC-TheLibrary")
(am '(#$isa #$PrologCYC-TheLibrary #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$authorOfProgramWithAIS #$PrologCYC-TheLibrary #$DouglasMiles) #$LogicMOOMt)

;; The LogicMOOProject implements a paraconsistent openworld defeasible modal temporal epistemological deontic logic.

(f "LogicMOOProject") ;; contains the following projects (nonexhaustive):
(am '(#$isa #$LogicMOOProject #$Project) #$LogicMOOMt)

(f "E2C-TheProgram")
(am '(#$isa #$E2C-TheProgram #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$authorOfProgramWithAIS #$E2C-TheProgram #$DouglasMiles) #$LogicMOOMt)
(am '(#$projectUsesTool #$LogicMOOProject #$E2C-TheProgram) #$LogicMOOMt)

(f "SxxMachine-TheProgram")
(am '(#$isa #$SxxMachine-TheProgram #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$authorOfProgramWithAIS #$SxxMachine-TheProgram #$DouglasMiles) #$LogicMOOMt)
(am '(#$projectUsesTool #$LogicMOOProject #$SxxMachine-TheProgram) #$LogicMOOMt)

(f "LispSync-TheProgram")

;; LogicMOOProject contains the following SWIPL packs (nonexhaustive):

;; LogicMOOBase

;; LogicMOOProject may use the following external projects (nonexhaustive):

(f "Shop3-TheProgram")
(am '(#$isa #$Shop3-TheProgram #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$projectUsesTool #$LogicMOOProject #$Shop3-TheProgram) #$LogicMOOMt)

(f "TuProlog-TheProgram")
(am '(#$isa #$TuProlog-TheProgram #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$projectUsesTool #$LogicMOOProject #$TuProlog-TheProgram) #$LogicMOOMt)

(f "PopLog-TheProgram")
(am '(#$isa #$PopLog-TheProgram #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$projectUsesTool #$LogicMOOProject #$PopLog-TheProgram) #$LogicMOOMt)

(f "ScriptApplierModule-TheProgram")
(am '(#$isa #$ScriptApplierModule-TheProgram #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$projectUsesTool #$LogicMOOProject #$ScriptApplierModule-TheProgram) #$LogicMOOMt)
(am '(#$acronymString #$ScriptApplierModule-TheProgram "SAM") #$LogicMOOMt)

(f "PlanApplierModule-TheProgram")
(am '(#$isa #$PlanApplierModule-TheProgram #$ComputerProgram-CW) #$LogicMOOMt)
(am '(#$projectUsesTool #$LogicMOOProject #$PlanApplierModule-TheProgram) #$LogicMOOMt)
(am '(#$acronymString #$PlanApplierModule-TheProgram "PAM")

(f "CycBehaviorLanguage-TheProgram")

;; LogicMOOProject integrates these existing AI systems (nonexhaustive):

;; OpenCYC
;; ResearchCYC
(f "Shrdlu-TheProrgam")
(f "Daydreamer-TheProgram")
(f "KnowledgeMachine-TheProgram")

;; References:

;; notable-chatlogs/incoming/#logicmoo-20190614.txt

;; Project Metadata:

;; EmacsWikiMarkup

;; Potential Projects:

;; Be great for instance we had an expert at using JNIL,
;; or someone that can port ugly AllegroCL to SBCL code,
;; or someone to take the STELLA-to-CommonLisp and convert it to CycLisp-to-CommonLisp,
;; or someone to port nice old demos to using CYC's blackboard instead get/set-props,
;; or someone to finish my CLOS<->BlackboardedCLOS,
;; BlackboardedCLOS uses a prolog-like backend.

;; Desiderata

;; Need a Lisp, a Java, a Prolog developer at least.
;; Someone understands Cyc and Schank better.
;; Email Schank saying we are implementing his SPGU-T, ask if he's interested.
;; Should invite Kino as well.

;; What we have

;; Actually two, maybe three other people in #logicmoo do know CYC very very well.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; (E2C)

;;     The critical paths to EToCProject:
;;         SxxMachine + LarKc: Fastest method to develop, but will run too slow.
;;         PopLog
;;         SteelBankCommonLisp + something

;;     Dependencies:
;;         depends(EToCProject,or(+(SxxMachine,LarKc),PopLog,+(SteelBankCommonLisp,something))).
;;         depends(LarKc, SxxMachine).
;;         depends(SxxMachine, 'test to see if its ready').

;;     Use Cases:
;;         Translating IRC logs into EmacsWikis.
;;         Translating IRC logs into academic articles as part of Coauthor using GPT-2 over citeseer (generate-phrase (cyclify INPUT) #$RKFParaphraseMt). We replace #$RKFParaphraseMt with AcademicParaphraseMt).
;;         Parsing Math Knowledge from English into CycLanguage.
;;         Translating .do and .notes files into Logic.
;;         Read D&D Dungeon Master campaign notes and translate into logic for use with role-playing.
;;         Reading text to index knowledge (for instance for the Free Life Planner).
;;         Parsing text received by Alexa into commands.

;;     Notes:

;; ShopThree is going to be how i test if the EToCProject parse makes sense.

;; So the right way to EToCProject is through ScriptApplierModule / PlanApplierModule

;; PlanApplierModule needs ShopThree.

;; ScriptApplierModule (and/or PlanApplierModule) creates a set of valid stories given any context.. and tells the older EToCProject method what it expects to parse

;;     Q/A

;; Q: Do you think one could use EToCProject to do MathematicalKnowledgeManagement, extracting out math terminology?

;; A: It depends .. ScriptApplierModule / EToCProject is more likely to learn the math out of reading

;; p Q: 6-14 20:47:11 do you have a recent semi-working version of EToCProject I could bootstrap my version from, or should I just be patient?

;; A: 2019-06-14 20:48:28 not really i definitely had saved off verisons but all them are on rusted out CDs or dead harddrives

;;     See Also:

;; FEToCProject.

;; 2019-11-15 14:20:56 e2c was mostly fixing cycorps code between versions that no longer runs,, i9 fixed almost 1/2 but it take aniother month to fix the rest 2019-11-15 14:21:10 then it take a month to expose it 2019-11-15 14:21:38 expose it = write up docs on how to use it 2019-11-15 14:21:59 well build an applkication that lets peopel use the code etc 2019-11-15 14:22:25 hoping maybe once funding comes in i can hire somone from cycorp to work on it 2019-11-15 14:22:42 (instead of me)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; (SxxMachine)

;; 2019-06-14 20:51:51 in other words i need to set up Travis and things 2019-06-14 20:52:03 in order to feel like i wont jsut write broken code


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Adding a new class to LarKc called LispSync.

;; LispSync is like PrologSync except it is supposed to expose the CYC-API into the browsable CYC KB, so that much of the stuff we don't see how to use is asserted to the KB. Calling CYC-API from CycL.

;; EvaluateSubLFn is not sufficient, since what calls instances would be used to invoke the planner. LispSync adds those calls.

;; It also allows us to see the planner intermediate states in the browser.

;; This is similar to the API auto synthesis, but LispSync exposes a hand picked one right now... however, setting up a regexp system that notices them.

;; Its written in Java but the regexp notices when Lisp creates classes matching the regexp like SHOP-*

;; Though one thing to figure out still, is if there is way to capture the field set/gets of arbitrary classes.

;; DouglasRMiles created a system to capture that in 2006, but with all the removed classes in J9 it won't carry over.

;; LispSync reverse engineers Common Lisp programs like ShopThree, ShrdluSystem, DAYDREAMER, etc while they are being loaded. In doing so replaces some of their vital internal data-structures: DOMAINS, PLANS, LEXICAL-INFO, DAYDREAMS, GOALS, PLANS with proxy objects that are stored in the KB using assert/retract/query into the KB... The objects can continue to run as they did before, but now any of the parts can be hacked /controlled/ vetted/populated from CYC rules.
;; LispSync is essentially the Java version BABYLON the Lycurgus talks about.
;; Why its called "Sync" is there are times when things are not always going to be straight forward. It is important to EToCProject because it allows Lisp coded ShrlduSystem's LEXICAL information to mix with DAYDREAMER's. And these programs end up with not only their personal data structures but each others. The "Sync" is between ShrdluSystem, ShopThree, happens from the CYC KB using forward-chaining, Initially this was one of the reasons i writing WAM-CL .. (the Common Lisp interpreter written in Prolog) is because the SHOPS.pl implementation allowed data-structure sharing without the CYC KB. Initially this was one of the reasons i started writing WAM-CL .. (the Common Lisp interpreter written in Prolog) is because the SHOPS.pl implementation allowed datastruture sharing within the Prolog database. Sometimes it converts the right hand side ois a CYC implication into virtual object s.. for instance when we assert we have a problem it can construct a SHOP-PROBLEM object. Which right there contains all API to run the domain. Which right there contains all API to run the problem for a solution by assertion as to what domain it starts the visible hierarchy from, similar to how Drools works with Java, (LispSync does with Common Lisp). This system also allows CYC to have programmatic control over itself LispSync however is very LarKC_CL specific.. it won't translate over the SBCL :( for SteelBankCommonLisp .. BABYLON will be an option to replace LispSync.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; LogicMOOBase is everything that is not LogicMOOProject.

;; | (#$isa #$LogicMOOBase #$PrologMUDProject)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; http://www.cs.bham.ac.uk/research/projects/poplog/latest-poplog/#ubuntu

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (SAM).

;; https://link.springer.com/content/pdf/10.3758%2FBF03205115.pdf

;; All the mistakes of my early EToCProject are things ScriptApplierModule doesn't make.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (PAM).

;; https://link.springer.com/content/pdf/10.3758%2FBF03205115.pdf


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
